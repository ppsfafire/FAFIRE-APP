const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://jqrjcnxwdsrojflxtiii.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Impxcmpjbnh3ZHNyb2pmbHh0aWlpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTEwOTcwMjEsImV4cCI6MjA2NjY3MzAyMX0.wXxAc1aVH_xF3rbhbGXo2bOy2M5jmmXQnZgEyLcb50U';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function checkDatabase() {
  console.log('üîç Verificando configura√ß√£o do banco de dados...\n');

  try {
    // Testar conex√£o
    console.log('1. Testando conex√£o...');
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.log('‚ùå Erro na conex√£o:', error.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o estabelecida com sucesso!\n');

    // Verificar tabelas existentes
    console.log('2. Verificando tabelas existentes...');
    
    // Verificar se a tabela categories existe
    const { data: categoriesData, error: categoriesError } = await supabase
      .from('categories')
      .select('*')
      .limit(1);
    
    if (categoriesError) {
      console.log('‚ùå Tabela "categories" n√£o encontrada');
      console.log('   Erro:', categoriesError.message);
    } else {
      console.log('‚úÖ Tabela "categories" encontrada');
    }

    // Verificar se a tabela tasks existe
    const { data: tasksData, error: tasksError } = await supabase
      .from('tasks')
      .select('*')
      .limit(1);
    
    if (tasksError) {
      console.log('‚ùå Tabela "tasks" n√£o encontrada');
      console.log('   Erro:', tasksError.message);
    } else {
      console.log('‚úÖ Tabela "tasks" encontrada');
    }

    // Verificar storage
    console.log('\n3. Verificando storage...');
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.log('‚ùå Erro ao verificar storage:', bucketsError.message);
    } else {
      const taskImagesBucket = buckets.find(bucket => bucket.name === 'task-images');
      if (taskImagesBucket) {
        console.log('‚úÖ Bucket "task-images" encontrado');
      } else {
        console.log('‚ùå Bucket "task-images" n√£o encontrado');
      }
    }

    // Verificar autentica√ß√£o
    console.log('\n4. Verificando autentica√ß√£o...');
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.log('‚ùå Erro na autentica√ß√£o:', authError.message);
    } else {
      console.log('‚úÖ Autentica√ß√£o configurada corretamente');
    }

    console.log('\nüìä Resumo da verifica√ß√£o:');
    console.log('========================');
    console.log('URL:', supabaseUrl);
    console.log('Status: Conectado');
    console.log('Tabelas necess√°rias: Verificar manualmente no dashboard');
    console.log('Storage: Verificar manualmente no dashboard');
    console.log('Autentica√ß√£o: Configurada');

    console.log('\nüîß Pr√≥ximos passos:');
    console.log('1. Acesse o dashboard do Supabase');
    console.log('2. Execute os comandos SQL do arquivo SUPABASE_SETUP.md');
    console.log('3. Configure o bucket de storage se necess√°rio');
    console.log('4. Teste o app com as credenciais configuradas');

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar verifica√ß√£o
checkDatabase(); 